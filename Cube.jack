class Cube {

    field Array points;
    field int x, y, z;
  
    constructor Cube new(int sideLength, int positionX, int positionY, int positionZ) {
        var int i, j, k; // Iterators.
        var int iteratorsStartValue;
        var int currentPointIndex;
    
        let sideLength = sideLength & -2; // We don't accept odd side-lengths.
        let x = positionX;
        let y = positionY;
        let z = positionZ;
        let points = Array.new(8);

        // Initialize cube corners,
        // To avoid emitting code for 8 method calls with 3 parameters each, let's do it
        // as a loop. It's not faster, but it should save space (84 VM instructions vs 115).
        let iteratorsStartValue = -(sideLength / 2);

        let currentPointIndex = 0;
        let k = iteratorsStartValue;
        while (k < sideLength) {
            let j = iteratorsStartValue;
            while (j < sideLength) {
                let i = iteratorsStartValue;
                while (i < sideLength) {
                    let points[currentPointIndex] = Point3D.new(i, j, k);
                    let currentPointIndex = currentPointIndex + 1;
                    let i = i + sideLength;                    
                }
                let j = j + sideLength;
            }
            let k = k + sideLength;
        }
        
        return this;
    }
    
    method void resetToInitial() {
        var Point3D currentPoint; var int i; let i = 0;
        while (i < 8) {
            let currentPoint = points[i];
            do currentPoint.resetToInitial();
            let i = i + 1;
        }
        return ;
    }
    
    method void saveTransformation() {
        var Point3D currentPoint; var int i; let i = 0;
        while (i < 8) {
            let currentPoint = points[i];
            do currentPoint.backUpCoordinates();
            let i = i + 1;
        }
        return ;
    }

    method void rotate(int angle, int axis) {
        var Point3D currentPoint; var int i; let i = 0;
        while (i < 8) {
            let currentPoint = points[i];
            do currentPoint.rotate(angle, axis);
            let i = i + 1;
        }
        return ;
    }
 
    method void dispose() {
        var Point3D currentPoint; var int i; let i = 0;
        while (i<8) { 
            let currentPoint = points[i];
            do currentPoint.dispose();
            let i = i + 1;
        }
        do points.dispose();    
        do Memory.deAlloc(this);
        return;
    }
    
    method void drawLine(int point1Index, int point2Index, boolean drawLatest) {
        var Point3D point1, point2;
        let point1 = points[point1Index];
        let point2 = points[point2Index];
        if (drawLatest) {
            do Screen.drawLine(
                    x + point1.getX(), y + point1.getY(),
                    x + point2.getX(), y + point2.getY());
        } else {
            do Screen.drawLine(
                    x + point1.getOldX(), y + point1.getOldY(),
                    x + point2.getOldX(), y + point2.getOldY());
        }
        return;
    }
    
    method void draw(boolean drawLatest) {
        // Front face,
        do drawLine(0, 1, drawLatest);
        do drawLine(0, 2, drawLatest);
        do drawLine(1, 3, drawLatest);
        do drawLine(2, 3, drawLatest);

        // Back face,
        do drawLine(4, 5, drawLatest);
        do drawLine(4, 6, drawLatest);
        do drawLine(5, 7, drawLatest);
        do drawLine(6, 7, drawLatest);
 
        // Connecting faces,
        do drawLine(0, 4, drawLatest);
        do drawLine(1, 5, drawLatest);
        do drawLine(2, 6, drawLatest);
        do drawLine(3, 7, drawLatest);

        return;
    }
}

// 
// A Jack program, submitted to project #9 of the Nand to Tetris course.
// By Omar El Sayyed.
// The 29th of July, 2022.
//
// Tons of optimizations can still be applied, but doing this would sacrifice 
// readability. I heavily optimized the math functions, but performed only
// basic optimizations on the application logic classes.

class Main {
    function void main() {
        var Cube cube;
        var Int32 yawAngle    , pitchAngle    ;
        var Int32 yawAngleStep, pitchAngleStep;
        
        do Int32  .initialize();
        do MathF  .initialize();
        do Point3D.initialize();
        
        let cube = Cube.new(110, 255, 127, 0);
        let   yawAngle = Int32.new(0, 0);
        let pitchAngle = Int32.new(0, 0);
        let   yawAngleStep = Int32.new(2, 0);
        let pitchAngleStep = Int32.new(1, 12240);
                
        while (true) {
        
            do cube.resetToInitial();
            do cube.rotate(  yawAngle[1], 0);
            do cube.rotate(pitchAngle[1], 1);
                   
            do Screen.setColor(false);
            do cube.draw(false);
            do Screen.setColor(true);
            do cube.draw(true);

            do cube.saveTransformation();

            do   yawAngle.add(  yawAngleStep);
            do pitchAngle.add(pitchAngleStep);
        }
 
        // Unreachable code, but whatever,
        do   yawAngle    .dispose();
        do pitchAngle    .dispose();
        do   yawAngleStep.dispose();
        do pitchAngleStep.dispose();
        do cube.dispose();       
       
        return;
    }
}

class Point3D {

    field int initialX, initialY, initialZ;
    field Int32 x, y, z;
    field int oldX, oldY, oldZ;

    static Int32 cosAngle, sinAngle, tempInt32;
    
    function void initialize() {
        let cosAngle = Int32.new(0, 0);
        let sinAngle = Int32.new(0, 0);
        let tempInt32 = Int32.new(0, 0);
        return;
    }    
    
    constructor Point3D new(int startingX, int startingY, int startingZ) {
        let initialX = startingX;
        let initialY = startingY;
        let initialZ = startingZ;
        let oldX = startingX;
        let oldY = startingY;
        let oldZ = startingZ;
        let x = Int32.new(startingX, 0);
        let y = Int32.new(startingY, 0);
        let z = Int32.new(startingZ, 0);
        return this;
    }
 
    method void dispose() {
        do x.dispose();
        do y.dispose();
        do z.dispose();
        do Memory.deAlloc(this);
        return;
    }
    
    // TODO: de-initialize....
    
    method void resetToInitial() {
        do x.set(initialX, 0);
        do y.set(initialY, 0);
        do z.set(initialZ, 0);
        return;
    }

    method void backUpCoordinates() {
        let oldX = x.getUpper();
        let oldY = y.getUpper();
        let oldZ = z.getUpper();
        return;
    }
    
    method int getX() { return x.getUpper(); }
    method int getY() { return y.getUpper(); }
    method int getZ() { return z.getUpper(); }

    method int getOldX() { return oldX; }
    method int getOldY() { return oldY; }
    method int getOldZ() { return oldZ; }


    method void yaw(int angleDegrees) {
        var int tempX, tempY;
               
        do MathF.cos(angleDegrees, cosAngle);
        do MathF.sin(angleDegrees, sinAngle);

        let tempX = x.getUpper();
        let tempY = y.getUpper();
           
        // x*cos(Angle) - y*sin(Angle)
        do x.upperToLowerWithSignExtend();
        do x.multiply(cosAngle);
        do y.upperToLowerWithSignExtend();
        do y.multiply(sinAngle);
        do y.negate();
        do x.add(y);
        
        // y*cos(Angle) + x*sin(Angle)
        do y.setLowerWithSignExtend(tempY);
        do y.multiply(cosAngle);
        do tempInt32.setLowerWithSignExtend(tempX);
        do tempInt32.multiply(sinAngle);
        do y.add(tempInt32);

        return;
    }
    
    method void yawFast(int angleDegrees) {
        var int tempX, tempY, cosLower, sinLower;
               
        do MathF.cos(angleDegrees, cosAngle);
        do MathF.sin(angleDegrees, sinAngle);

        let tempX = x.getUpper();
        let tempY = y.getUpper();
           
        if (cosAngle.getUpper() = 0) {
            let cosLower = cosAngle.getLower();

            if (sinAngle.getUpper() = 0) {
                let sinLower = sinAngle.getLower();
                // x*cos(Angle) - y*sin(Angle)
                do x.upperToLowerWithSignExtend();
                do x.multiplyInt(cosLower);
                do y.upperToLowerWithSignExtend();
                do y.multiplyInt(sinLower);
                do y.negate();
                do x.add(y);                
                // y*cos(Angle) + x*sin(Angle)
                do y.setLowerWithSignExtend(tempY);
                do y.multiplyInt(cosLower);
                do tempInt32.setLowerWithSignExtend(tempX);
                do tempInt32.multiplyInt(sinLower);
                do y.add(tempInt32);
            } else {
                do sinAngle.negate();
                let sinLower = sinAngle.getLower();
                // x*cos(Angle) - y*sin(Angle)
                do x.upperToLowerWithSignExtend();
                do x.multiplyInt(cosLower);
                do y.upperToLowerWithSignExtend();
                do y.multiplyInt(sinLower);
                do x.add(y);
                // y*cos(Angle) + x*sin(Angle)
                do y.setLowerWithSignExtend(tempY);
                do y.multiplyInt(cosLower);
                do tempInt32.setLowerWithSignExtend(tempX);
                do tempInt32.multiplyInt(sinLower);
                do tempInt32.negate();
                do y.add(tempInt32);            
            }
        } else {
            do cosAngle.negate();
            let cosLower = cosAngle.getLower();

            if (sinAngle.getUpper() = 0) {
                let sinLower = sinAngle.getLower();
                // x*cos(Angle) - y*sin(Angle)
                do x.upperToLowerWithSignExtend();
                do x.multiplyInt(cosLower);
                do y.upperToLowerWithSignExtend();
                do y.multiplyInt(sinLower);
                do x.add(y);
                do x.negate();
                // y*cos(Angle) + x*sin(Angle)
                do y.setLowerWithSignExtend(tempY);
                do y.multiplyInt(cosLower);
                do y.negate();
                do tempInt32.setLowerWithSignExtend(tempX);
                do tempInt32.multiplyInt(sinLower);
                do y.add(tempInt32);
            } else {
                do sinAngle.negate();
                let sinLower = sinAngle.getLower();
                // x*cos(Angle) - y*sin(Angle)
                do x.upperToLowerWithSignExtend();
                do x.multiplyInt(cosLower);
                do x.negate();
                do y.upperToLowerWithSignExtend();
                do y.multiplyInt(sinLower);
                do x.add(y);
                // y*cos(Angle) + x*sin(Angle)
                do y.setLowerWithSignExtend(tempY);
                do y.multiplyInt(cosLower);
                do tempInt32.setLowerWithSignExtend(tempX);
                do tempInt32.multiplyInt(sinLower);
                do y.add(tempInt32);
                do y.negate();
            }
        }

        return;
    }
}

class Int32 {
    
    field int upper, lower;
    
    static Int32 temp1, temp2;
    static int wordMSB;

    constructor Int32 new(int upperWord, int lowerWord) {
        let upper = upperWord;
        let lower = lowerWord;        
        return this;
    }

    function void initialize() {
        let wordMSB = 32767 + 1;
        let temp1 = Int32.new(0, 0);
        let temp2 = Int32.new(0, 0);
        return ;
    }
   
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
 
    method int getUpper() { return upper; }
    method int getLower() { return lower; }
   
    method void set(int upperWord, int lowerWord) {
        let upper = upperWord;
        let lower = lowerWord;
        return;
    }
   
    method void upperToLowerWithSignExtend() {
        let lower = upper;
        if ((upper & wordMSB) < 0) {
            let upper = -1;
        } else {
            let upper = 0;
        }
        return ;
    }
    
    method void setLowerWithSignExtend(int newLower) {
        let lower = newLower;
        if ((newLower & wordMSB) < 0) {
            let upper = -1;
        } else {
            let upper = 0;
        }
        return ;
    }
   
    method void add(Int32 value) {
        var int valueLower;
        var int lowerSign, valueLowerSign, sumSign;

        let upper = upper + value.getUpper();

        let valueLower = value.getLower();
        let valueLowerSign = valueLower & wordMSB;
        let      lowerSign =      lower & wordMSB;
       
        let lower = lower + valueLower;
        let        sumSign =      lower & wordMSB;
        
        if ((lowerSign & valueLowerSign < 0) |
            ((~(lowerSign = valueLowerSign)) & (sumSign = 0))) {
            let upper = upper + 1;
        } 
        return;
    }
    
    method void double() {
        let upper = upper + upper;
        if ((lower & wordMSB) < 0) {
            let upper = upper + 1;
        }
        let lower = lower + lower;
        return;
    }

    method void negate() {
        let upper = ~upper;
        if (lower = 0) {
            let upper = upper + 1;
        } else {
            let lower = (~lower) + 1;
        }
        return;
    }

    method void subtract(Int32 value) {    
        do temp1.set(value.getUpper(), value.getLower());
        do temp1.negate();
        do add(temp1);
        return;
    }
        
    method void shiftLeft(int amount) {
        while (amount > 0) {
            do double();
            let amount = amount - 1;
        }
        return;
    }
        
    method void print() {
        do Output.printString("upper: ");
        do Output.printInt(upper);
        do Output.printString(", lower: ");
        do Output.printInt(lower);
        do Output.println();
        return;
    }
    
    method void multiplyInt(int multiplier) {
        var int shiftMask;
        let shiftMask=1;
    
        do temp1.set(upper, lower);
        
        let upper=0;
        let lower=0;
        while (~(multiplier=0)) {
            if (~((shiftMask & multiplier) = 0)) {
                do add(temp1);
                let multiplier = multiplier - shiftMask;
            }
            do temp1.double();
            let shiftMask = shiftMask + shiftMask;
        }
         
        return;
    }
    
    method boolean testAnd(Int32 value) {
        return ~(((upper & value.getUpper()) | (lower & value.getLower())) = 0);
    }

    method void multiply(Int32 multiplier) {
        var int count;
        let count=32;
    
        do temp1.set(upper, lower);
        do temp2.set(0, 1);

        let upper=0;
        let lower=0;
        while (count>0) {
            if (temp2.testAnd(multiplier)) {
                do add(temp1);
            }
            do temp1.double();
            do temp2.double();
            let count = count - 1;
        }
         
        return;
    }
   
    method void divide(int divisor) {
        var int reciprocal;
        let reciprocal = (32767 / divisor) * 2;

        // TODO: Use upperToLowerWithSignExtend...

        // temp1 is used in multiplyInt(),
        do temp2.set(0, upper);
        do temp2.multiplyInt(reciprocal);
        let upper = 0;
        do multiplyInt(reciprocal);
        let lower = upper;
        let upper = 0;
        do add(temp2);        
        
        return;
    }
}

